{
  "description": "Java 11",
  "questions": {
    "1": "What are the main features introduced in Java 11?",
    "2": "How do you use var in lambda expressions in Java 11?",
    "3": "What is the new HttpClient API introduced in Java 11?",
    "4": "How does the HttpClient handle asynchronous requests?",
    "5": "What is the purpose of HttpResponse.BodyHandlers in Java 11?",
    "6": "How does the HttpClient support HTTP/2 in Java 11?",
    "7": "What is the Flight Recorder feature in Java 11?",
    "8": "How does the Flight Recorder help in performance monitoring?",
    "9": "What are the improvements to the Z Garbage Collector (ZGC) in Java 11?",
    "10": "How does ZGC improve latency in garbage collection?",
    "11": "What are the differences between ZGC and G1 garbage collectors?",
    "12": "How do you run a single Java file with the new java command in Java 11?",
    "13": "What are the new string methods introduced in Java 11?",
    "14": "How does the String.isBlank() method work in Java 11?",
    "15": "What is the use of String.strip() in Java 11?",
    "16": "How does String.repeat() work in Java 11?",
    "17": "What is the difference between String.strip() and String.trim()?",
    "18": "How do you use Files.writeString() in Java 11?",
    "19": "What is the Files.readString() method in Java 11?",
    "20": "How does the Optional.isEmpty() method work in Java 11?",
    "21": "What are the new enhancements to the Nest-Based Access Control feature?",
    "22": "What is the var keyword usage for local variables in Java 11?",
    "23": "What are the improvements to the Stream API in Java 11?",
    "24": "How does the Predicate.not() method simplify code?",
    "25": "What are the new methods for Collectors introduced in Java 11?",
    "26": "What are the changes to HttpClient introduced in Java 11?",
    "27": "How do you handle asynchronous and synchronous requests using HttpClient?",
    "28": "What is JEP 323: Local-Variable Syntax for Lambda Parameters in Java 11?",
    "29": "What is the Nest-Based Access Control feature introduced in Java 11?",
    "30": "How does Nest-Based Access Control improve encapsulation?",
    "31": "How do you enable dynamic class-file constants with JEP 309 in Java 11?",
    "32": "What is JEP 318: Epsilon: A No-Op Garbage Collector in Java 11?",
    "33": "What are the use cases for the Epsilon garbage collector?",
    "34": "How do you launch a single-file source code program in Java 11?",
    "35": "What is the default garbage collector in Java 11?",
    "36": "What is the new java.net.http module in Java 11?",
    "37": "How does the java launcher enhance script-like programming in Java 11?",
    "38": "What is JEP 331: Low-Overhead Heap Profiling in Java 11?",
    "39": "What are the enhancements to var usage in lambda expressions in Java 11?",
    "40": "How do pattern matching improvements help in Java 11?",
    "41": "What are the new collection factory methods introduced in Java 11?",
    "42": "How do you run Java programs with only a single command in Java 11?",
    "43": "What is JEP 320: Remove the Java EE and CORBA Modules in Java 11?",
    "44": "How do you use TLS 1.3 in Java 11?",
    "45": "What are the security improvements in Java 11?",
    "46": "How do you optimize string concatenation with JEP 326 in Java 11?",
    "47": "How does HTTP/2 improve performance in Java 11?",
    "48": "What are the improvements to class files and bytecode in Java 11?",
    "49": "How does Java 11 support Unicode 10.0?",
    "50": "What are the licensing and support changes for Java 11?"
  },
  "groups": {
    "1": "Java 11 Overview",
    "2": "Lambda Expressions",
    "3": "HttpClient",
    "4": "HttpClient",
    "5": "HttpClient",
    "6": "HttpClient",
    "7": "Performance Monitoring",
    "8": "Performance Monitoring",
    "9": "Garbage Collection",
    "10": "Garbage Collection",
    "11": "Garbage Collection",
    "12": "Java 11 Overview",
    "13": "String API",
    "14": "String API",
    "15": "String API",
    "16": "String API",
    "17": "String API",
    "18": "File I/O",
    "19": "File I/O",
    "20": "Optional",
    "21": "Nest-Based Access Control",
    "22": "var Keyword",
    "23": "Stream API",
    "24": "Stream API",
    "25": "Stream API",
    "26": "HttpClient",
    "27": "HttpClient",
    "28": "Lambda Expressions",
    "29": "Nest-Based Access Control",
    "30": "Nest-Based Access Control",
    "31": "Class-File Constants",
    "32": "Garbage Collection",
    "33": "Garbage Collection",
    "34": "Java 11 Overview",
    "35": "Garbage Collection",
    "36": "HttpClient",
    "37": "Java 11 Overview",
    "38": "Performance Monitoring",
    "39": "Lambda Expressions",
    "40": "Pattern Matching",
    "41": "Collections",
    "42": "Java 11 Overview",
    "43": "Java 11 Overview",
    "44": "Security",
    "45": "Security",
    "46": "Performance Enhancements",
    "47": "HttpClient",
    "48": "Bytecode Enhancements",
    "49": "Unicode Support",
    "50": "Licensing"
  },
  "answers": {
    "1": "Java 11 introduced features such as the HttpClient API, improvements to Z Garbage Collector (ZGC), new string methods (isBlank, strip, etc.), and more.",
    "2": "In Java 11, you can use var in lambda expressions to declare the types of parameters explicitly while still maintaining local variable type inference.",
    "3": "The HttpClient API in Java 11 allows you to send HTTP requests and receive responses with support for both synchronous and asynchronous communication.",
    "4": "The HttpClient in Java 11 handles asynchronous requests using CompletableFuture to manage tasks asynchronously.",
    "5": "HttpResponse.BodyHandlers in Java 11 allow you to define how the response body should be processed, like as a string, byte array, or input stream.",
    "6": "The HttpClient in Java 11 supports HTTP/2 by default, improving performance with features like multiplexing and server push.",
    "7": "Flight Recorder is a performance monitoring tool in Java 11 that records and analyzes low-level system events for diagnosing issues in production.",
    "8": "Flight Recorder helps in performance monitoring by providing low-overhead, continuous recording of events without significantly impacting system performance.",
    "9": "Java 11 improved the Z Garbage Collector (ZGC) by optimizing for low-latency garbage collection with minimal impact on application throughput.",
    "10": "ZGC improves latency by performing garbage collection concurrently with the running application, minimizing pauses and improving responsiveness.",
    "11": "ZGC is designed for low-latency applications, while G1 is more focused on balancing throughput and latency. ZGC also scales better with larger heap sizes.",
    "12": "In Java 11, you can compile and run a single Java file directly from the command line using the new java command, without needing to explicitly compile it first.",
    "13": "New string methods introduced in Java 11 include String.isBlank(), String.strip(), String.repeat(), and String.lines(), improving string manipulation.",
    "14": "String.isBlank() checks whether a string is empty or consists solely of whitespace characters.",
    "15": "String.strip() removes leading and trailing whitespace from a string, similar to trim() but with support for Unicode whitespace.",
    "16": "String.repeat() repeats the string a specified number of times, returning a new string containing the repeated sequence.",
    "17": "String.strip() removes all types of leading and trailing whitespace, including Unicode spaces, whereas trim() only removes ASCII space characters.",
    "18": "Files.writeString() writes a string directly to a file, simplifying file output operations.",
    "19": "Files.readString() reads the entire content of a file into a string, simplifying file input operations.",
    "20": "Optional.isEmpty() is a new method in Java 11 that checks whether an Optional is empty, making it easier to handle absent values.",
    "21": "Nest-Based Access Control improves access control by allowing classes that are part of the same nest (e.g., inner classes) to access each other's private members.",
    "22": "In Java 11, the var keyword can be used for local variable declarations, including within lambda expressions and loops.",
    "23": "Java 11 improves the Stream API with new methods like takeWhile(), dropWhile(), and iterate(), making it easier to work with streams.",
    "24": "Predicate.not() simplifies code by negating a given predicate, making the code more readable, especially in stream pipelines.",
    "25": "New methods introduced for Collectors in Java 11 include filtering() and flatMapping(), which provide additional flexibility when collecting streams.",
    "26": "The HttpClient in Java 11 adds support for WebSockets, HTTP/2, and asynchronous request handling, improving its versatility.",
    "27": "HttpClient in Java 11 supports both asynchronous requests using CompletableFuture and synchronous requests using blocking methods.",
    "28": "JEP 323 allows var to be used in lambda expressions for local variable type inference, improving code readability and conciseness.",
    "29": "Nest-Based Access Control allows classes that are part of the same nest (i.e., inner and outer classes) to access each other's private members.",
    "30": "Nest-Based Access Control improves encapsulation by restricting access to private members to classes within the same nest, rather than the entire package.",
    "31": "JEP 309 enables dynamic class-file constants, which allows the JVM to define new kinds of constants that can improve performance and memory efficiency.",
    "32": "JEP 318 introduced the Epsilon garbage collector, which is a no-op garbage collector that handles memory allocation but never reclaims memory.",
    "33": "The Epsilon garbage collector is useful for performance testing, short-lived applications, or memory-constrained environments where garbage collection isn't needed.",
    "34": "Java 11 introduced a new way to launch single-file source code programs directly from the command line without pre-compilation, making prototyping easier.",
    "35": "In Java 11, the default garbage collector is G1, which balances throughput and latency for a variety of applications.",
    "36": "The java.net.http module in Java 11 provides the new HttpClient API for sending HTTP requests and receiving responses with asynchronous and HTTP/2 support.",
    "37": "The java launcher in Java 11 simplifies script-like programming by allowing single-file Java source code to be run without prior compilation.",
    "38": "JEP 331 introduces low-overhead heap profiling, which provides lightweight monitoring of heap usage without impacting application performance.",
    "39": "Java 11 enhances var usage in lambda expressions, allowing more flexibility in declaring lambda parameters with local variable type inference.",
    "40": "Pattern matching improvements in Java 11 make it easier to extract values from objects and apply type-specific operations, simplifying conditional logic.",
    "41": "Java 11 introduces new collection factory methods that allow you to create immutable collections more easily with methods like List.of() and Set.of().",
    "42": "Java programs can now be run with a single command by specifying the source file directly to the java launcher, simplifying script-like execution.",
    "43": "JEP 320 removed the Java EE and CORBA modules from the JDK in Java 11, as they were considered outdated and no longer relevant.",
    "44": "TLS 1.3 is the default security protocol in Java 11, providing better security and performance for encrypted communication.",
    "45": "Java 11 introduces several security improvements, including TLS 1.3 support, improved cryptography algorithms, and better default trust store management.",
    "46": "JEP 326 improves string concatenation in Java 11 by optimizing it at the bytecode level, reducing the overhead of string manipulation.",
    "47": "HTTP/2 improves performance in Java 11 by reducing latency, allowing multiplexing of multiple requests over a single connection, and enabling server push.",
    "48": "Java 11 includes improvements to class files and bytecode, such as support for dynamic constants, which can improve runtime performance.",
    "49": "Java 11 adds support for Unicode 10.0, bringing the latest set of characters and symbols to the language, including new emojis.",
    "50": "Java 11 introduces new licensing and support changes, as it is the first LTS (Long-Term Support) release after Java 8, with Oracle offering paid support."
  }
}
