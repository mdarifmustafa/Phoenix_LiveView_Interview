{
  "description": "Java 7",
  "questions": {
    "1": "What are the main features of Java?",
    "2": "What is the Java Virtual Machine (JVM)? Explain its architecture.",
    "3": "What is the difference between JDK, JRE, and JVM?",
    "4": "What is the difference between == and equals() method in Java?",
    "5": "What is a ClassLoader in Java?",
    "6": "What are the types of ClassLoader in Java?",
    "7": "What are primitive data types in Java?",
    "8": "What is the final keyword in Java?",
    "9": "What is the static keyword in Java?",
    "10": "What are wrapper classes in Java?",
    "11": "What is the purpose of the toString() method in Java?",
    "12": "What is a constructor in Java?",
    "13": "What is the difference between constructor overloading and method overloading?",
    "14": "What is the difference between this and super keywords in Java?",
    "15": "What is the default value of an object reference in Java?",
    "16": "What is the Object class in Java?",
    "17": "What is the role of the finalize() method in Java?",
    "18": "Can you override a private or static method in Java?",
    "19": "What is the use of instanceof in Java?",
    "20": "What is the strictfp keyword in Java?",
    "21": "What are the four main OOP principles?",
    "22": "What is encapsulation in Java?",
    "23": "How do you implement inheritance in Java?",
    "24": "What is polymorphism in Java? Explain with an example.",
    "25": "What is the difference between method overloading and method overriding in Java?",
    "26": "What is abstraction in Java?",
    "27": "What is an abstract class in Java?",
    "28": "What is an interface in Java? How is it different from an abstract class?",
    "29": "What is the default method in an interface (Java 8)?",
    "30": "Can an interface extend another interface in Java?",
    "31": "What is multiple inheritance in Java?",
    "32": "How do you achieve multiple inheritance in Java?",
    "33": "What is a marker interface in Java?",
    "34": "What is the diamond problem in inheritance?",
    "35": "How does memory management work in Java?",
    "36": "What is garbage collection in Java?",
    "37": "What are the types of garbage collectors in Java?",
    "38": "What is the difference between heap and stack memory in Java?",
    "39": "What are memory leaks in Java? How can you prevent them?",
    "40": "What is the purpose of the finalize() method in garbage collection?",
    "41": "What are strong, weak, soft, and phantom references in Java?",
    "42": "How does the JVM decide when to perform garbage collection?",
    "43": "What is exception handling in Java?",
    "44": "What are checked and unchecked exceptions in Java?",
    "45": "What is the difference between throw and throws in Java?",
    "46": "What is a try-catch-finally block in Java? How does it work?",
    "47": "Can a try block be used without a catch block in Java?",
    "48": "What is the finally block? When does it not get executed?",
    "49": "What is the difference between Exception and Error in Java?",
    "50": "How do you create a custom exception in Java?",
    "51": "What is the try-with-resources statement in Java (introduced in Java 7)?",
    "52": "How do you rethrow exceptions in Java 7?",
    "53": "What is the Java Collections Framework?",
    "54": "What is the difference between ArrayList and LinkedList in Java?",
    "55": "What is the difference between HashMap and Hashtable in Java?",
    "56": "What is the difference between Set, List, and Map in Java?",
    "57": "What is the difference between HashSet and TreeSet in Java?",
    "58": "What is the difference between HashMap and TreeMap?",
    "59": "What is fail-fast and fail-safe in Java collections?",
    "60": "What are the main features of ArrayList in Java?",
    "61": "What is the Iterator interface in Java?",
    "62": "What is the difference between Iterator and ListIterator?",
    "63": "How do you synchronize a collection in Java?",
    "64": "What is the ConcurrentHashMap in Java?",
    "65": "What are the advantages of Generics in Java?",
    "66": "What is a Comparator and Comparable interface in Java?",
    "67": "What is multithreading in Java?",
    "68": "How do you create a thread in Java?",
    "69": "What is the difference between Thread and Runnable in Java?",
    "70": "What is the difference between start() and run() methods in Java?",
    "71": "What is thread synchronization in Java?",
    "72": "What is the difference between synchronized and volatile keywords in Java?",
    "73": "What is a deadlock in Java? How can you prevent it?",
    "74": "What are wait(), notify(), and notifyAll() methods in Java?",
    "75": "What is the ThreadLocal class in Java?",
    "76": "What is Callable and Future in Java?",
    "77": "How do you create an Executor Service in Java?",
    "78": "What is the ForkJoinPool in Java?",
    "79": "What is serialization in Java?",
    "80": "What is the difference between Serializable and Externalizable in Java?",
    "81": "What is the purpose of the transient keyword in Java?",
    "82": "What is java.io.Serializable interface?",
    "83": "What is object cloning in Java?",
    "84": "How do you handle file I/O operations in Java?",
    "85": "What is the difference between FileReader and BufferedReader in Java?",
    "86": "What is Autoboxing and Unboxing in Java?",
    "87": "What is the enum type in Java?",
    "88": "What are varargs in Java? How do you use them?",
    "89": "What are static imports in Java?",
    "90": "What is the try-with-resources statement in Java 7?",
    "91": "What is the diamond operator in Java 7?",
    "92": "What is the switch statement support for strings in Java 7?",
    "93": "How do you use Fork/Join framework in Java 7?",
    "94": "What is the java.util package in Java?",
    "95": "How does the StringBuilder differ from StringBuffer?",
    "96": "What is the Scanner class in Java?",
    "97": "How do you use the Random class in Java?",
    "98": "What is the Locale class in Java?",
    "99": "How does the hashCode() method work in Java?",
    "100": "How do you implement deep cloning in Java?"
  },
  "groups": {
    "1": "basics",
    "2": "basics",
    "3": "basics",
    "4": "basics",
    "5": "basics",
    "6": "basics",
    "7": "basics",
    "8": "basics",
    "9": "basics",
    "10": "basics",
    "11": "basics",
    "12": "basics",
    "13": "basics",
    "14": "basics",
    "15": "basics",
    "16": "basics",
    "17": "basics",
    "18": "basics",
    "19": "basics",
    "20": "basics",
    "21": "OOP",
    "22": "OOP",
    "23": "OOP",
    "24": "OOP",
    "25": "OOP",
    "26": "OOP",
    "27": "OOP",
    "28": "OOP",
    "29": "OOP",
    "30": "OOP",
    "31": "OOP",
    "32": "OOP",
    "33": "OOP",
    "34": "OOP",
    "35": "memory management",
    "36": "memory management",
    "37": "memory management",
    "38": "memory management",
    "39": "memory management",
    "40": "memory management",
    "41": "memory management",
    "42": "memory management",
    "43": "exception handling",
    "44": "exception handling",
    "45": "exception handling",
    "46": "exception handling",
    "47": "exception handling",
    "48": "exception handling",
    "49": "exception handling",
    "50": "exception handling",
    "51": "exception handling",
    "52": "exception handling",
    "53": "collections",
    "54": "collections",
    "55": "collections",
    "56": "collections",
    "57": "collections",
    "58": "collections",
    "59": "collections",
    "60": "collections",
    "61": "collections",
    "62": "collections",
    "63": "collections",
    "64": "collections",
    "65": "collections",
    "66": "collections",
    "67": "multithreading",
    "68": "multithreading",
    "69": "multithreading",
    "70": "multithreading",
    "71": "multithreading",
    "72": "multithreading",
    "73": "multithreading",
    "74": "multithreading",
    "75": "multithreading",
    "76": "multithreading",
    "77": "multithreading",
    "78": "multithreading",
    "79": "serialization",
    "80": "serialization",
    "81": "serialization",
    "82": "serialization",
    "83": "serialization",
    "84": "file I/O",
    "85": "file I/O",
    "86": "advanced",
    "87": "advanced",
    "88": "advanced",
    "89": "advanced",
    "90": "advanced",
    "91": "advanced",
    "92": "advanced",
    "93": "advanced",
    "94": "advanced",
    "95": "advanced",
    "96": "advanced",
    "97": "advanced",
    "98": "advanced",
    "99": "advanced",
    "100": "advanced"
  },
  "answers": {
    "1": "The main features of Java are: Platform independence, Object-oriented, Secure, Robust, Portable, High performance, Multithreaded, and Distributed.",
    "2": "The JVM is an abstract machine that provides the runtime environment in which Java bytecode is executed. It includes components like the ClassLoader, Bytecode Verifier, and the Interpreter.",
    "3": "JDK is the development kit containing the JRE and development tools like compilers. JRE is the runtime environment with JVM, libraries, and other components to run Java applications. JVM is the part of JRE that executes Java bytecode.",
    "4": "The == operator compares references, whereas equals() compares the actual content.",
    "5": "A ClassLoader is a part of the JVM that loads class files into memory for execution.",
    "6": "There are three types of ClassLoader: Bootstrap, Extension, and System/Application ClassLoader.",
    "7": "The primitive data types in Java are byte, short, int, long, float, double, char, and boolean.",
    "8": "The final keyword is used to declare constants, prevent method overriding, and inheritance of classes.",
    "9": "The static keyword in Java is used to define class-level variables and methods.",
    "10": "Wrapper classes in Java provide a way to use primitive data types as objects.",
    "11": "The toString() method in Java provides a string representation of an object.",
    "12": "A constructor is a special method used to initialize objects in Java.",
    "13": "Constructor overloading refers to having multiple constructors in a class with different parameters, whereas method overloading refers to multiple methods with the same name but different parameters.",
    "14": "this refers to the current instance of a class, while super refers to the parent class.",
    "15": "The default value of an object reference is null.",
    "16": "The Object class is the parent class of all classes in Java.",
    "17": "The finalize() method is called by the garbage collector before an object is destroyed.",
    "18": "Private methods cannot be overridden. Static methods are not instance-level, so they cannot be overridden either.",
    "19": "The instanceof keyword checks whether an object is an instance of a specific class or subclass.",
    "20": "The strictfp keyword is used to restrict floating-point calculations to ensure portability across platforms.",
    "21": "The four main OOP principles are Encapsulation, Inheritance, Polymorphism, and Abstraction.",
    "22": "Encapsulation refers to the bundling of data with the methods that operate on that data, restricting direct access to some of an object's components.",
    "23": "Inheritance in Java allows one class to inherit fields and methods from another class.",
    "24": "Polymorphism allows a method to do different things based on the object it is acting upon. Example: method overloading and method overriding.",
    "25": "Method overloading allows multiple methods with the same name but different parameters, while method overriding allows a subclass to provide a specific implementation of a method already defined in its superclass.",
    "26": "Abstraction is the process of hiding the implementation details and showing only functionality to the user.",
    "27": "An abstract class is a class that cannot be instantiated and is used to define common characteristics of its subclasses.",
    "28": "An interface is a reference type in Java, similar to a class, that can contain only constants, method signatures, default methods, static methods, and nested types. It cannot contain method implementations, unlike an abstract class.",
    "29": "A default method is a method with an implementation defined in an interface, introduced in Java 8.",
    "30": "Yes, an interface can extend another interface. Multiple inheritance of interfaces is allowed.",
    "31": "Multiple inheritance in Java is the ability of a class to inherit features from more than one parent class.",
    "32": "Multiple inheritance is achieved in Java through interfaces, as Java doesn't support multiple inheritance directly through classes.",
    "33": "A marker interface is an empty interface with no methods or constants. It is used to mark a class as having a specific property, like Serializable or Cloneable.",
    "34": "The diamond problem occurs when multiple classes inherit from more than one parent class, leading to ambiguity. Java avoids this by not allowing multiple inheritance with classes.",
    "35": "Memory management in Java is handled by the JVM, which includes heap memory (used for dynamic allocation) and stack memory (used for method calls and local variables).",
    "36": "Garbage collection is the process of reclaiming the runtime unused memory by destroying objects that are no longer in use.",
    "37": "There are several types of garbage collectors in Java: Serial, Parallel, CMS (Concurrent Mark-Sweep), and G1 (Garbage-First) collectors.",
    "38": "Heap memory is used to store objects and is shared across all threads, while stack memory is used for method execution and contains local variables. Each thread has its own stack memory.",
    "39": "A memory leak occurs when an object that is no longer needed is not properly released, causing memory to be unnecessarily consumed. This can be prevented by ensuring proper memory management and object references.",
    "40": "The finalize() method allows an object to clean up resources before it is collected by the garbage collector.",
    "41": "Java provides four types of references: strong, weak, soft, and phantom. Strong references prevent garbage collection, while weak, soft, and phantom references allow different levels of garbage collection eligibility.",
    "42": "The JVM typically performs garbage collection when the heap memory is low, though this behavior is generally dependent on the specific garbage collector in use.",
    "43": "Exception handling in Java is a mechanism for handling runtime errors to maintain the normal flow of the application.",
    "44": "Checked exceptions are exceptions that must be either caught or declared in the method signature, while unchecked exceptions are not required to be caught or declared.",
    "45": "The throw keyword is used to explicitly throw an exception, while throws is used in the method signature to declare the type of exceptions that might be thrown.",
    "46": "A try-catch-finally block is used to handle exceptions. The try block contains code that might throw an exception, the catch block handles the exception, and the finally block contains code that will always execute regardless of an exception being thrown.",
    "47": "Yes, a try block can be used without a catch block if a finally block is present.",
    "48": "The finally block will not execute if the JVM exits while the try or catch block is running, or if the thread executing the code is killed.",
    "49": "An Exception is a condition that a program can recover from, while an Error is a serious problem that cannot be recovered from.",
    "50": "A custom exception is created by extending the Exception class (for checked exceptions) or RuntimeException class (for unchecked exceptions).",
    "51": "The try-with-resources statement, introduced in Java 7, ensures that each resource is closed at the end of the statement.",
    "52": "In Java 7, you can rethrow exceptions in a more flexible manner using the multi-catch feature.",
    "53": "The Java Collections Framework is a set of classes and interfaces that implement commonly reusable collection data structures like lists, sets, maps, and queues.",
    "54": "ArrayList uses a dynamic array to store elements, while LinkedList uses a doubly linked list. ArrayList is better for retrieving elements, and LinkedList is better for inserting and deleting elements.",
    "55": "HashMap allows one null key and multiple null values, while Hashtable does not allow any null key or value. HashMap is unsynchronized, while Hashtable is synchronized.",
    "56": "Set is a collection that contains no duplicate elements, List is an ordered collection that allows duplicates, and Map contains key-value pairs.",
    "57": "HashSet is unordered and does not maintain any order, while TreeSet is sorted in natural order or according to a comparator.",
    "58": "HashMap does not maintain any order, while TreeMap sorts the entries by key either in natural order or according to a comparator.",
    "59": "Fail-fast iterators throw ConcurrentModificationException if the collection is modified while iterating, while fail-safe iterators do not throw exceptions because they work on a copy of the collection.",
    "60": "ArrayList is a resizable array implementation of the List interface. It provides random access to elements and is not synchronized.",
    "61": "The Iterator interface in Java provides methods to iterate over a collection.",
    "62": "The Iterator can only traverse in one direction, while ListIterator can traverse in both directions.",
    "63": "You can synchronize a collection by using the Collections.synchronizedCollection() method or by using concurrent collections like ConcurrentHashMap.",
    "64": "ConcurrentHashMap is a thread-safe version of HashMap that allows concurrent reads and updates.",
    "65": "Generics provide type safety and allow the same code to be used with different types.",
    "66": "The Comparable interface is used to define the natural ordering of objects, while Comparator allows sorting in custom order.",
    "67": "Multithreading in Java is a process of executing multiple threads simultaneously to perform tasks concurrently.",
    "68": "You can create a thread in Java by either extending the Thread class or implementing the Runnable interface.",
    "69": "Thread is a class that represents a thread of execution, while Runnable is a functional interface representing the task to be executed by a thread.",
    "70": "The start() method starts a new thread, while the run() method contains the code that is executed by the thread.",
    "71": "Thread synchronization in Java is a mechanism that ensures that multiple threads do not simultaneously modify shared resources.",
    "72": "The synchronized keyword ensures that a block of code can only be executed by one thread at a time, while the volatile keyword ensures visibility of changes to variables across threads.",
    "73": "A deadlock occurs when two or more threads are blocked forever, waiting for each other. You can prevent deadlock by avoiding circular dependencies and holding locks in a consistent order.",
    "74": "The wait() method causes the current thread to wait until another thread calls notify() or notifyAll() on the same object. notify() wakes up one waiting thread, while notifyAll() wakes up all waiting threads.",
    "75": "ThreadLocal provides thread-local variables that are unique to each thread accessing them.",
    "76": "Callable is similar to Runnable but can return a result and throw checked exceptions. Future represents the result of an asynchronous computation.",
    "77": "You can create an Executor Service by using the Executors utility class, which provides factory methods for creating thread pools.",
    "78": "The ForkJoinPool is a framework introduced in Java 7 that allows parallel execution of tasks using a divide-and-conquer approach.",
    "79": "Serialization in Java is the process of converting an object into a byte stream to save it to a file or send it over the network.",
    "80": "Serializable is a marker interface that allows an object to be serialized, while Externalizable gives more control over the serialization process.",
    "81": "The transient keyword prevents fields from being serialized.",
    "82": "The java.io.Serializable interface allows an object to be serialized and deserialized.",
    "83": "Object cloning in Java is the process of creating an exact copy of an object.",
    "84": "File I/O operations in Java can be handled using classes in the java.io package, such as FileReader, FileWriter, BufferedReader, and BufferedWriter.",
    "85": "FileReader reads characters from a file, while BufferedReader reads text from a character-input stream, buffering characters for efficient reading.",
    "86": "Autoboxing is the automatic conversion of primitive types to their corresponding wrapper classes, while unboxing is the reverse.",
    "87": "An enum type in Java is a special data type that represents a group of constants.",
    "88": "Varargs allow a method to accept zero or more arguments of a specific type.",
    "89": "Static imports allow static members (fields and methods) to be used in a class without qualifying them with the class name.",
    "90": "The try-with-resources statement in Java 7 ensures that resources are closed at the end of the statement, reducing boilerplate code.",
    "91": "The diamond operator in Java 7 allows you to omit the generic type information in constructor calls.",
    "92": "The switch statement in Java 7 added support for strings, allowing the use of string values as case labels.",
    "93": "The Fork/Join framework in Java 7 provides a way to perform parallel computation by breaking tasks into smaller pieces and joining the results.",
    "94": "The java.util package provides utility classes for data structures, date and time, and various utilities like Scanner, Random, etc.",
    "95": "StringBuilder is faster and more efficient than StringBuffer because it is not synchronized, making it suitable for single-threaded applications.",
    "96": "The Scanner class is used to parse primitive types and strings using regular expressions.",
    "97": "The Random class is used to generate random numbers in Java.",
    "98": "The Locale class in Java represents a specific geographical, political, or cultural region.",
    "99": "The hashCode() method provides a unique integer representation of an object for hash-based collections like HashMap and HashSet.",
    "100": "Deep cloning in Java involves creating a complete duplicate of an object and all objects it references."
  }
}
