{
  "description": "Java 10",
  "questions": {
    "1": "What are the main features introduced in Java 10?",
    "2": "What is the new var keyword in Java 10?",
    "3": "How does var differ from traditional variable declarations?",
    "4": "Can you use var with class fields or method parameters?",
    "5": "What are the advantages of using var in Java 10?",
    "6": "How does var improve code readability?",
    "7": "What is the Local Variable Type Inference in Java 10?",
    "8": "How does Java 10 handle backward compatibility with var?",
    "9": "What are the new enhancements in garbage collection (GC) in Java 10?",
    "10": "What is the G1 Garbage Collector optimization in Java 10?",
    "11": "What is the new Application Class-Data Sharing (AppCDS) feature in Java 10?",
    "12": "How does AppCDS improve startup performance in Java 10?",
    "13": "How do you create an unmodifiable List using List.copyOf() in Java 10?",
    "14": "How do you create an unmodifiable Set using Set.copyOf() in Java 10?",
    "15": "How do you create an unmodifiable Map using Map.copyOf() in Java 10?",
    "16": "What is the Optional.orElseThrow() method in Java 10?",
    "17": "What is the purpose of Optional.isEmpty() in Java 10?",
    "18": "What are the improvements to the CompletableFuture API in Java 10?",
    "19": "What are the new Container-Aware JVM features in Java 10?",
    "20": "How does the JVM interact with container environments like Docker?",
    "21": "What is Parallel Full GC for G1 in Java 10?",
    "22": "How does Java 10 improve memory allocation with containers?",
    "23": "What are the performance improvements in Java 10?",
    "24": "What is the Root Certificates feature in Java 10?",
    "25": "How does Java 10 address security with Root Certificates?"
  },
  "groups": {
    "1": "Java 10 Overview",
    "2": "Java 10 Overview",
    "3": "Local Variable Type Inference",
    "4": "Local Variable Type Inference",
    "5": "Local Variable Type Inference",
    "6": "Local Variable Type Inference",
    "7": "Local Variable Type Inference",
    "8": "Local Variable Type Inference",
    "9": "Garbage Collection",
    "10": "Garbage Collection",
    "11": "Application Class-Data Sharing",
    "12": "Application Class-Data Sharing",
    "13": "Collections",
    "14": "Collections",
    "15": "Collections",
    "16": "Optional",
    "17": "Optional",
    "18": "CompletableFuture",
    "19": "JVM Enhancements",
    "20": "JVM Enhancements",
    "21": "Garbage Collection",
    "22": "JVM Enhancements",
    "23": "Performance Improvements",
    "24": "Security",
    "25": "Security"
  },
  "answers": {
    "1": "Java 10 introduced features such as the var keyword for local variable type inference, garbage collection improvements, Application Class-Data Sharing (AppCDS), and container-aware JVM enhancements.",
    "2": "The var keyword in Java 10 allows local variables to have their type inferred by the compiler, simplifying variable declarations.",
    "3": "var differs from traditional variable declarations in that the compiler infers the variable type based on the assigned value, whereas traditional declarations require explicit type definitions.",
    "4": "No, var cannot be used with class fields, method parameters, or return types; it is limited to local variables within methods or code blocks.",
    "5": "Using var can make the code more concise and reduce redundancy by eliminating the need to repeatedly specify variable types.",
    "6": "var can improve readability by focusing on the intent of the code rather than the specific types, especially in complex or generic type declarations.",
    "7": "Local Variable Type Inference allows the type of a variable to be inferred at compile-time when declared with var, making code cleaner and more maintainable.",
    "8": "Backward compatibility with var is handled well, as var does not introduce any runtime changes; it is purely a compile-time feature.",
    "9": "Java 10 introduces optimizations in the G1 Garbage Collector and other garbage collection (GC) improvements for better performance and memory management.",
    "10": "The G1 Garbage Collector optimization in Java 10 includes parallel full garbage collection (Parallel Full GC) for improved throughput.",
    "11": "The Application Class-Data Sharing (AppCDS) feature in Java 10 allows sharing of class metadata across multiple Java applications to improve startup time and memory efficiency.",
    "12": "AppCDS improves startup performance by enabling multiple Java applications to share preloaded class metadata, reducing the time required to load classes.",
    "13": "You create an unmodifiable List using List.copyOf() by passing an existing collection to it, which returns an immutable copy of the list.",
    "14": "You create an unmodifiable Set using Set.copyOf() by passing an existing collection to it, which returns an immutable copy of the set.",
    "15": "You create an unmodifiable Map using Map.copyOf() by passing an existing map to it, which returns an immutable copy of the map.",
    "16": "The Optional.orElseThrow() method in Java 10 is a cleaner alternative to Optional.get(), throwing a NoSuchElementException if the value is absent.",
    "17": "Optional.isEmpty() in Java 10 is a new method that returns true if the Optional is empty, making it easier to check for the absence of a value.",
    "18": "The CompletableFuture API in Java 10 includes enhancements for improved support of timeouts and better handling of async tasks, such as new methods like CompletableFuture.delayedExecutor().",
    "19": "Java 10 introduced container-aware JVM features that allow the JVM to recognize and adapt to resource constraints in container environments like Docker.",
    "20": "The JVM in Java 10 can now adjust heap size, CPU usage, and garbage collection behavior based on the memory and CPU limits of the container it is running in.",
    "21": "Parallel Full GC for G1 in Java 10 enhances the performance of garbage collection by allowing full GC phases to be parallelized, improving throughput for applications.",
    "22": "Java 10 improves memory allocation in containers by dynamically adjusting the maximum heap size and other memory settings based on container limits.",
    "23": "Java 10 introduced several performance improvements, including faster startup times due to AppCDS, better memory management, and more efficient garbage collection.",
    "24": "The Root Certificates feature in Java 10 provides a default set of root certificates in the JDK, simplifying the process of enabling HTTPS connections out of the box.",
    "25": "The Root Certificates feature addresses security by providing a default trust store of root certificates, reducing the need for third-party certificate installations and improving secure communication."
  }
}
