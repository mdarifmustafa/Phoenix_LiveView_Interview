{
  "description": "Spring Boot Annotations",
  "questions": {
    "1": "@SpringBootApplication: What is it, and why is it important?",
    "2": "Explain the difference between @Component, @Service, and @Repository.",
    "3": "@RestController: What is it, and how does it differ from @Controller?",
    "4": "How does @GetMapping work in Spring Boot?",
    "5": "Explain the usage of @PostMapping, @PutMapping, and @DeleteMapping.",
    "6": "@RequestBody: What is it, and how is it used in Spring Boot?",
    "7": "How does @PathVariable work in Spring Boot?",
    "8": "@RequestParam: What is it, and how does it differ from @PathVariable?",
    "9": "Explain the role of @Autowired in dependency injection.",
    "10": "@Qualifier: What is it, and how is it used with @Autowired?",
    "11": "How does @Configuration work in Spring Boot?",
    "12": "@Bean: What is it, and how do you create beans using it?",
    "13": "@Primary: What is it, and how is it used in Spring Boot?",
    "14": "@Value: What is it, and how do you use it to inject properties?",
    "15": "How does @RequestScope work in Spring Boot?",
    "16": "@SessionScope: What is it, and when should it be used?",
    "17": "Explain the purpose of @Lazy in Spring Boot.",
    "18": "@Profile: What is its role in Spring Boot applications?",
    "19": "How does @Async work in Spring Boot?",
    "20": "@EnableScheduling: What is its purpose?",
    "21": "@Scheduled: What is it, and how is it used?",
    "22": "@EnableCaching: How does it enable caching in Spring Boot?",
    "23": "How do you use @Cacheable and @CacheEvict in Spring Boot?",
    "24": "@ControllerAdvice: What is it, and how is it used?",
    "25": "How does @ExceptionHandler work in Spring Boot?",
    "26": "@CrossOrigin: What is its role in handling CORS in Spring Boot?",
    "27": "@ResponseEntity: What is it, and how does it work in REST APIs?",
    "28": "How does @JsonProperty work in Spring Boot?",
    "29": "@EnableAutoConfiguration: What is its role in auto-configuration?",
    "30": "@Entity: What is its role in Spring Boot JPA?",
    "31": "@Table: How does it work in Spring Boot JPA?",
    "32": "@Id: What is it, and how is it used in Spring Boot JPA?",
    "33": "@GeneratedValue: What is it, and what are its strategies in JPA?",
    "34": "@OneToOne: How does it work in Spring Boot JPA?",
    "35": "@ManyToOne: What is it, and how is it used?",
    "36": "@OneToMany: What is its role, and how does @ManyToMany relate?",
    "37": "@JoinColumn: What is it, and how does it relate to JPA?",
    "38": "@Transactional: How does it work in Spring Boot?",
    "39": "@Modifying: What is it, and how is it used with JPA repositories?",
    "40": "@Query: What is it, and how does it define custom queries in Spring Boot JPA?",
    "41": "@RestClientTest: How does it work in Spring Boot testing?",
    "42": "@MockBean: What is it, and how is it used in testing?",
    "43": "@SpyBean: How does it work in Spring Boot tests?",
    "44": "@TestConfiguration: What is its purpose in Spring Boot testing?",
    "45": "@WebMvcTest: How does it simplify controller testing?",
    "46": "@DataJpaTest: What is its role in Spring Boot testing?",
    "47": "@Import: How does it work in Spring Boot applications?",
    "48": "@ConditionalOnProperty: What is its purpose?",
    "49": "@ConditionalOnMissingBean: How does it work in Spring Boot?",
    "50": "@EventListener: What is its role in Spring Boot events?"
  },
  "groups": {
    "1": "Core Concepts",
    "2": "Core Concepts",
    "3": "Core Concepts",
    "4": "Core Concepts",
    "5": "Core Concepts",
    "6": "Core Concepts",
    "7": "Core Concepts",
    "8": "Core Concepts",
    "9": "Core Concepts",
    "10": "Core Concepts",
    "11": "Core Concepts",
    "12": "Core Concepts",
    "13": "Core Concepts",
    "14": "Core Concepts",
    "15": "Core Concepts",
    "16": "Core Concepts",
    "17": "Core Concepts",
    "18": "Core Concepts",
    "19": "Core Concepts",
    "20": "Core Concepts",
    "21": "Core Concepts",
    "22": "Core Concepts",
    "23": "Core Concepts",
    "24": "Core Concepts",
    "25": "Core Concepts",
    "26": "Core Concepts",
    "27": "Core Concepts",
    "28": "Core Concepts",
    "29": "Core Concepts",
    "30": "Data Management",
    "31": "Data Management",
    "32": "Data Management",
    "33": "Data Management",
    "34": "Data Management",
    "35": "Data Management",
    "36": "Data Management",
    "37": "Data Management",
    "38": "Core Concepts",
    "39": "Core Concepts",
    "40": "Core Concepts",
    "41": "Testing",
    "42": "Testing",
    "43": "Testing",
    "44": "Testing",
    "45": "Testing",
    "46": "Testing",
    "47": "Core Concepts",
    "48": "Core Concepts",
    "49": "Core Concepts",
    "50": "Core Concepts"
  },
  "answers": {
    "1": "@SpringBootApplication is a convenience annotation that combines @Configuration, @EnableAutoConfiguration, and @ComponentScan, indicating that it is the primary entry point for the Spring Boot application.",
    "2": "@Component is a generic stereotype for any Spring-managed component, @Service is specifically for service-layer components, and @Repository is used for Data Access Object (DAO) components.",
    "3": "@RestController is a specialized version of @Controller that adds @ResponseBody, making it suitable for RESTful APIs as it directly returns response data without the need for a view.",
    "4": "@GetMapping is used to handle HTTP GET requests and maps them to specific handler methods in a controller.",
    "5": "@PostMapping, @PutMapping, and @DeleteMapping are used to handle POST, PUT, and DELETE HTTP requests, respectively, simplifying RESTful request handling.",
    "6": "@RequestBody is used to bind the HTTP request body to a method parameter, typically for deserializing JSON into a Java object.",
    "7": "@PathVariable is used to extract values from the URI path in the request and bind them to method parameters.",
    "8": "@RequestParam is used to extract query parameters from the request URL, while @PathVariable is used to extract values from the URI path.",
    "9": "@Autowired is used to inject Spring-managed beans into other beans, facilitating dependency injection.",
    "10": "@Qualifier is used to specify which bean to inject when multiple candidates are available for injection.",
    "11": "@Configuration indicates that a class declares one or more @Bean methods, which Spring will process to generate bean definitions.",
    "12": "@Bean is used to create a Spring-managed bean, allowing for manual configuration of bean properties and lifecycle.",
    "13": "@Primary is used to indicate that a bean should be given preference when multiple candidates are qualified to autowire.",
    "14": "@Value is used to inject property values from application configuration files into Spring beans.",
    "15": "@RequestScope indicates that a bean should be created for each HTTP request, making it suitable for request-specific data.",
    "16": "@SessionScope creates a bean that is tied to the user’s session, allowing data to persist across multiple requests.",
    "17": "@Lazy indicates that the bean should not be created until it is first requested, optimizing startup time.",
    "18": "@Profile is used to indicate that a bean or configuration should only be loaded in specific profiles, allowing for environment-specific configurations.",
    "19": "@Async allows methods to run asynchronously, enabling non-blocking behavior in the application.",
    "20": "@EnableScheduling enables the scheduling of tasks in the application, allowing for periodic execution of methods.",
    "21": "@Scheduled is used to define a method that should be executed at fixed intervals or according to a specific cron expression.",
    "22": "@EnableCaching enables Spring’s annotation-driven cache management capability, allowing for caching results of methods.",
    "23": "@Cacheable is used to indicate that the result of a method should be cached, while @CacheEvict is used to remove cached entries.",
    "24": "@ControllerAdvice is used to handle exceptions globally across all controllers, allowing for centralized error handling.",
    "25": "@ExceptionHandler is used to define custom error handling methods for specific exceptions in a controller or globally.",
    "26": "@CrossOrigin is used to allow cross-origin requests by configuring CORS settings for a controller or method.",
    "27": "@ResponseEntity is used to build a response with status code, headers, and body, providing full control over the HTTP response.",
    "28": "@JsonProperty is used to customize the JSON serialization and deserialization of fields in a Java object.",
    "29": "@EnableAutoConfiguration allows Spring Boot to automatically configure beans based on the dependencies present on the classpath.",
    "30": "@Entity is used to mark a class as a JPA entity, representing a table in the database.",
    "31": "@Table is used to specify the table to which the entity is mapped in the database, allowing customization of the table name.",
    "32": "@Id is used to denote the primary key of the entity, uniquely identifying each record in the database.",
    "33": "@GeneratedValue specifies the strategy for generating primary key values, such as AUTO, IDENTITY, or SEQUENCE.",
    "34": "@OneToOne is used to define a one-to-one relationship between two entities in JPA.",
    "35": "@ManyToOne is used to define a many-to-one relationship, where multiple entities can be associated with a single entity.",
    "36": "@OneToMany defines a one-to-many relationship, while @ManyToMany defines a many-to-many relationship.",
    "37": "@JoinColumn specifies the foreign key column in the table for a relationship between entities.",
    "38": "@Transactional manages transactions in Spring, ensuring that a set of operations either fully complete or roll back.",
    "39": "@Modifying is used with @Query to indicate that the query modifies data in the database, such as UPDATE or DELETE operations.",
    "40": "@Query allows the definition of custom queries using JPQL or SQL in Spring Data repositories.",
    "41": "@RestClientTest is used to test REST clients, providing a focused context for testing RESTful interactions.",
    "42": "@MockBean is used to create and inject mock objects into the Spring application context for testing purposes.",
    "43": "@SpyBean is used to create a spy object, allowing for verification of method calls while preserving the original behavior.",
    "44": "@TestConfiguration is used to define configuration for tests, allowing for custom beans and configurations during testing.",
    "45": "@WebMvcTest is used to test Spring MVC controllers, providing a limited context with only the web layer.",
    "46": "@DataJpaTest is used to test JPA repositories, providing an in-memory database and relevant configurations.",
    "47": "@Import is used to include additional configuration classes in a Spring context, allowing for modular configuration.",
    "48": "@ConditionalOnProperty allows beans to be created conditionally based on the presence or value of specified properties.",
    "49": "@ConditionalOnMissingBean creates a bean only if a specified bean is not already present in the context.",
    "50": "@EventListener is used to listen for application events and handle them asynchronously or synchronously."
  }
}
