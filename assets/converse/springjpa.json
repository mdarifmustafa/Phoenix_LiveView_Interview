{
  "description": "Spring Boot JPA",
  "questions": {
    "1": "What is Spring Data JPA?",
    "2": "How does Spring Boot simplify working with JPA?",
    "3": "What is JpaRepository, and how is it used in Spring Boot?",
    "4": "Explain the difference between CrudRepository and JpaRepository.",
    "5": "What is the role of the @Entity annotation in JPA?",
    "6": "Explain the purpose of @Table in Spring Boot JPA.",
    "7": "How does @Id work in JPA entities?",
    "8": "What is @GeneratedValue, and what strategies can be used with it?",
    "9": "How do you create custom queries using @Query in Spring Data JPA?",
    "10": "What is a named query, and how is it defined in Spring Boot JPA?",
    "11": "How does @Modifying work in JPA for update and delete operations?",
    "12": "What is @OneToOne in JPA, and how is it used?",
    "13": "Explain the role of @ManyToOne in JPA relationships.",
    "14": "How does @OneToMany work in Spring Boot JPA?",
    "15": "What is @ManyToMany, and when should it be used?",
    "16": "Explain the use of @JoinColumn in JPA relationships.",
    "17": "How does the @Inheritance annotation work in JPA?",
    "18": "What is the difference between EAGER and LAZY fetching in JPA?",
    "19": "How do you define a composite key in JPA using @IdClass or @EmbeddedId?",
    "20": "What is the role of @Version in optimistic locking with JPA?",
    "21": "How do you paginate query results with Spring Data JPA?",
    "22": "Explain how sorting is implemented in Spring Data JPA.",
    "23": "What are projection interfaces, and how are they used in JPA?",
    "24": "How do you handle transactions in Spring Boot with JPA?",
    "25": "What is the EntityManager, and how is it used in Spring Boot JPA?",
    "26": "Explain how criteria queries are implemented in JPA.",
    "27": "What is JPQL, and how does it differ from SQL?",
    "28": "How do you configure multiple data sources with Spring Boot JPA?",
    "29": "Explain the purpose of the PersistenceContext in JPA.",
    "30": "How do you audit entities in Spring Boot JPA?",
    "31": "How does JPA handle caching, and what is the role of @Cacheable?",
    "32": "How do you map a unidirectional and bidirectional relationship in JPA?",
    "33": "What is the purpose of @MappedSuperclass in JPA?",
    "34": "How do you map an inheritance hierarchy with JPA?",
    "35": "How does Spring Boot handle database migrations with Flyway and Liquibase?",
    "36": "What is the EntityGraph, and how is it used in JPA?",
    "37": "How do you handle bulk updates and deletes in JPA?",
    "38": "Explain the role of @ElementCollection in mapping collections with JPA.",
    "39": "How do you work with native SQL queries in Spring Data JPA?",
    "40": "What is the role of JpaTransactionManager in Spring Boot?",
    "41": "How do you handle exceptions in Spring Boot JPA?",
    "42": "Explain how to use @PrePersist and @PreUpdate in JPA.",
    "43": "How do you use JPA Criteria API in complex queries?",
    "44": "What are DTO projections in Spring Boot JPA?",
    "45": "How do you work with database views using Spring Data JPA?",
    "46": "What is the N+1 query problem in JPA, and how do you avoid it?",
    "47": "How do you write unit tests for Spring Data JPA repositories?",
    "48": "How does EntityListeners work in Spring Boot JPA?",
    "49": "What is QueryDSL, and how does it integrate with Spring Data JPA?",
    "50": "How do you optimize JPA performance in large-scale applications?"
  },
  "groups": {
    "1": "Core Concepts",
    "2": "Core Concepts",
    "3": "Repositories",
    "4": "Repositories",
    "5": "Entities",
    "6": "Entities",
    "7": "Entities",
    "8": "Entities",
    "9": "Queries",
    "10": "Queries",
    "11": "Queries",
    "12": "Relationships",
    "13": "Relationships",
    "14": "Relationships",
    "15": "Relationships",
    "16": "Relationships",
    "17": "Inheritance",
    "18": "Fetching",
    "19": "Keys",
    "20": "Concurrency",
    "21": "Pagination",
    "22": "Sorting",
    "23": "Projections",
    "24": "Transactions",
    "25": "EntityManager",
    "26": "Queries",
    "27": "Queries",
    "28": "Configuration",
    "29": "Contexts",
    "30": "Auditing",
    "31": "Caching",
    "32": "Relationships",
    "33": "Inheritance",
    "34": "Inheritance",
    "35": "Database Migrations",
    "36": "Graphs",
    "37": "Updates and Deletes",
    "38": "Collections",
    "39": "Queries",
    "40": "Transactions",
    "41": "Exception Handling",
    "42": "Lifecycle Callbacks",
    "43": "Criteria API",
    "44": "Projections",
    "45": "Views",
    "46": "Performance",
    "47": "Testing",
    "48": "Listeners",
    "49": "Integration",
    "50": "Performance"
  },
  "answers": {
    "1": "Spring Data JPA is a part of the Spring Data project that simplifies data access and manipulation using JPA (Java Persistence API) by providing an abstraction layer.",
    "2": "Spring Boot simplifies working with JPA by auto-configuring the necessary components, providing starter dependencies, and enabling easier integration with various databases.",
    "3": "JpaRepository is a JPA-specific extension of CrudRepository that provides additional methods for pagination, sorting, and custom query methods, allowing for more complex data access operations.",
    "4": "CrudRepository provides basic CRUD operations, while JpaRepository adds more JPA-specific functionality, including the ability to define custom queries and support for pagination.",
    "5": "@Entity annotation marks a class as a JPA entity, representing a table in the database, and allows JPA to map its properties to the columns of the table.",
    "6": "@Table annotation specifies the table name in the database that the entity maps to, allowing customization of the default naming convention.",
    "7": "@Id annotation is used to specify the primary key of the entity, uniquely identifying each record in the database.",
    "8": "@GeneratedValue is used to specify the strategy for generating primary key values, with strategies like AUTO, IDENTITY, SEQUENCE, and TABLE.",
    "9": "Custom queries can be created using the @Query annotation, allowing you to define JPQL or native SQL queries directly on repository methods.",
    "10": "A named query is a predefined query that can be defined using the @NamedQuery annotation in the entity class and can be reused without redefining it.",
    "11": "@Modifying is used to indicate that a query modifies data, such as update or delete operations, in the database and is often used in conjunction with @Query.",
    "12": "@OneToOne is used to define a one-to-one relationship between two entities, indicating that each instance of one entity is associated with exactly one instance of another entity.",
    "13": "@ManyToOne defines a many-to-one relationship where multiple instances of one entity can be associated with a single instance of another entity.",
    "14": "@OneToMany defines a one-to-many relationship, indicating that one entity can be associated with multiple instances of another entity.",
    "15": "@ManyToMany defines a many-to-many relationship where multiple instances of one entity can be associated with multiple instances of another entity.",
    "16": "@JoinColumn is used to specify the foreign key column in the table for a relationship, indicating how two entities are linked.",
    "17": "@Inheritance annotation specifies how inheritance is mapped to the database, allowing for single-table, joined, or table-per-class strategies.",
    "18": "EAGER fetching loads related entities immediately, while LAZY fetching loads related entities only when accessed, improving performance and reducing unnecessary data retrieval.",
    "19": "A composite key can be defined in JPA using @IdClass to define a separate class for the composite key or using @EmbeddedId to embed a key class directly in the entity.",
    "20": "@Version annotation is used for optimistic locking, allowing JPA to check the version of an entity before making updates, preventing lost updates in concurrent transactions.",
    "21": "Pagination can be implemented using Spring Data JPA by extending the repository interface with PagingAndSortingRepository and using methods like findAll(Pageable pageable).",
    "22": "Sorting is implemented in Spring Data JPA by passing a Sort object to repository methods or by using Pageable which also allows for sorting.",
    "23": "Projection interfaces are used to define a subset of an entity's properties that should be retrieved, allowing for optimized queries and reduced data transfer.",
    "24": "Transactions in Spring Boot with JPA can be handled using @Transactional annotation, which ensures that all operations within the annotated method are executed within a transaction.",
    "25": "The EntityManager is the primary JPA interface used to interact with the persistence context, providing methods for querying and managing entity states.",
    "26": "Criteria queries in JPA are implemented using the Criteria API, which provides a programmatic way to define queries using a type-safe and object-oriented approach.",
    "27": "JPQL (Java Persistence Query Language) is similar to SQL but operates on the entity object model instead of directly on the database tables.",
    "28": "Multiple data sources can be configured in Spring Boot JPA by creating multiple DataSource beans and configuring JPA properties for each data source.",
    "29": "The PersistenceContext is a JPA-managed context that holds entities and their states, enabling JPA to track changes and manage entity lifecycle.",
    "30": "Auditing entities in Spring Boot JPA can be done using the @CreatedDate and @LastModifiedDate annotations, which automatically populate fields with timestamps.",
    "31": "JPA handles caching through the use of second-level caches, allowing entities to be cached and reused, and @Cacheable can be used to cache method results.",
    "32": "Unidirectional relationships are mapped in one direction, while bidirectional relationships allow both entities to reference each other, enhancing navigation and querying.",
    "33": "@MappedSuperclass is used to define a superclass that provides common mappings for its subclasses without being an entity itself.",
    "34": "Inheritance hierarchies in JPA can be mapped using @Inheritance annotation, allowing subclasses to inherit properties from a parent class.",
    "35": "Spring Boot handles database migrations using Flyway and Liquibase by managing versioned migrations that apply changes to the database schema over time.",
    "36": "EntityGraph is used to define a graph of entities that should be fetched together, allowing for optimized loading of related entities and avoiding N+1 queries.",
    "37": "Bulk updates and deletes in JPA can be handled using JPQL or Criteria API with update or delete operations directly on the entities.",
    "38": "@ElementCollection is used to map collections of basic types or embeddable types, allowing entities to have a collection of non-entity types.",
    "39": "Native SQL queries in Spring Data JPA can be executed using the @Query annotation with the nativeQuery attribute set to true, allowing for direct SQL execution.",
    "40": "JpaTransactionManager is responsible for managing transactions in Spring Boot, coordinating the lifecycle of transactions across multiple repositories.",
    "41": "Exceptions in Spring Boot JPA can be handled using @ControllerAdvice to define global exception handling strategies for database-related operations.",
    "42": "@PrePersist and @PreUpdate are lifecycle callback annotations used to specify methods that should be executed before an entity is persisted or updated.",
    "43": "JPA Criteria API allows for building complex queries programmatically using a type-safe approach, enabling dynamic query construction.",
    "44": "DTO projections are used to define data transfer objects that represent a specific view of entity data, allowing for optimized data retrieval.",
    "45": "Database views can be worked with using Spring Data JPA by defining entities that map to the view, allowing queries to be executed against the view as if it were a table.",
    "46": "The N+1 query problem occurs when a query retrieves a collection of entities, and each entity is subsequently queried individually, leading to performance issues. This can be avoided using EAGER fetching or joins.",
    "47": "Unit tests for Spring Data JPA repositories can be written using @DataJpaTest, which provides an in-memory database for testing repository interactions.",
    "48": "EntityListeners are used to define callback methods that respond to lifecycle events for JPA entities, allowing for additional processing during state changes.",
    "49": "QueryDSL is a framework for constructing type-safe SQL-like queries, and it integrates with Spring Data JPA to provide a fluent API for query creation.",
    "50": "JPA performance in large-scale applications can be optimized by using batching, fetching strategies, caching, and avoiding unnecessary database calls."
  }
}
