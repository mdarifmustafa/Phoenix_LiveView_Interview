{
  "description": "Spring Boot Core & Theory",
  "questions": {
    "1": "What is Spring Boot, and how is it different from Spring Framework?",
    "2": "Explain the main features of Spring Boot.",
    "3": "How does Spring Boot simplify dependency management?",
    "4": "What is the purpose of the application.properties file in Spring Boot?",
    "5": "How does Spring Boot support microservices architecture?",
    "6": "What is Spring Boot Starter? Can you list some commonly used starters?",
    "7": "How does Spring Boot auto-configuration work?",
    "8": "How can you disable auto-configuration in Spring Boot?",
    "9": "What is the role of the @SpringBootApplication annotation?",
    "10": "Explain the Spring Boot Actuator and its benefits.",
    "11": "What is the importance of Spring Boot DevTools?",
    "12": "How does Spring Boot manage beans differently than the Spring Framework?",
    "13": "How can you configure a custom banner in Spring Boot?",
    "14": "Explain Spring Boot Profiles and their usage.",
    "15": "How can you run a Spring Boot application as a standalone JAR?",
    "16": "What is Spring Boot CLI, and how is it used?",
    "17": "Explain the concept of Embedded Servlet Containers in Spring Boot.",
    "18": "What is the difference between @Component, @Service, and @Repository?",
    "19": "How does Spring Boot handle database migrations with Flyway or Liquibase?",
    "20": "What is the role of the CommandLineRunner interface in Spring Boot?",
    "21": "How do you enable and configure logging in Spring Boot?",
    "22": "What is the default logging implementation in Spring Boot?",
    "23": "How does Spring Boot simplify REST API development?",
    "24": "Explain how to handle exceptions in a Spring Boot application.",
    "25": "How do you define custom properties in Spring Boot?",
    "26": "How does Spring Boot manage externalized configurations?",
    "27": "What is a Spring Boot filter, and how do you implement it?",
    "28": "How does Spring Boot manage session handling?",
    "29": "How do you implement caching in Spring Boot applications?",
    "30": "Explain the purpose of @Configuration in Spring Boot.",
    "31": "What is a BeanFactory in Spring Boot, and how is it different from ApplicationContext?",
    "32": "How do you create a custom health check in Spring Boot?",
    "33": "What are the different phases of a Spring Boot application lifecycle?",
    "34": "What is the importance of Spring Boot starters in managing dependencies?",
    "35": "How does Spring Boot handle hot-swapping of components?",
    "36": "Explain @ConditionalOnProperty and its use cases.",
    "37": "What is Spring Boot DevTools, and how does it improve the developer experience?",
    "38": "Explain Spring Boot’s default configuration for web applications.",
    "39": "How do you configure different environments in Spring Boot?",
    "40": "How does Spring Boot handle asynchronous processing?",
    "41": "How do you set up custom error pages in Spring Boot?",
    "42": "Explain the different ways to deploy a Spring Boot application.",
    "43": "What is the role of @Bean in Spring Boot, and how do you create beans?",
    "44": "How does Spring Boot handle version compatibility and dependency conflicts?",
    "45": "What is the Spring Boot Maven/Gradle plugin, and how do you use it?",
    "46": "How does Spring Boot handle reactive programming?",
    "47": "How do you handle and monitor metrics in Spring Boot?",
    "48": "How do you configure multiple data sources in Spring Boot?",
    "49": "What are Spring Boot filters, and how do they work?",
    "50": "Explain the role of DispatcherServlet in Spring Boot.",
    "51": "How do you configure task scheduling in Spring Boot?",
    "52": "What is the default packaging structure for Spring Boot projects?",
    "53": "How do you handle cross-origin requests (CORS) in Spring Boot?",
    "54": "What are Spring Boot configuration properties, and how do they work?",
    "55": "How does Spring Boot simplify working with databases?",
    "56": "What is Spring Boot’s support for internationalization (i18n)?",
    "57": "What is a Spring Boot servlet initializer, and why is it used?",
    "58": "How do you run a Spring Boot application on an external web server?",
    "59": "Explain how to set up a Spring Boot Admin Server.",
    "60": "How does Spring Boot support cloud-native application development?",
    "61": "What is the role of Spring Boot Actuator in monitoring applications?",
    "62": "How does Spring Boot integrate with cloud platforms like AWS or Azure?",
    "63": "How do you secure a Spring Boot application?",
    "64": "How do you enable HTTPS in a Spring Boot application?",
    "65": "What are Spring Boot interceptors, and how do you use them?",
    "66": "Explain the use of @SpringBootTest in testing a Spring Boot application.",
    "67": "How do you configure a Spring Boot application to run with multiple profiles?",
    "68": "What is the purpose of WebApplicationType in Spring Boot?",
    "69": "How does Spring Boot manage classpath scanning?",
    "70": "Explain how Spring Boot simplifies dependency injection.",
    "71": "How do you monitor a Spring Boot application in production?",
    "72": "What are the differences between Spring Boot 1.x and Spring Boot 2.x?",
    "73": "How do you configure Spring Boot for non-web applications?",
    "74": "What are some common use cases of Spring Boot in real-world applications?",
    "75": "How do you handle exceptions and global error handling in Spring Boot?"
  },
  "groups": {
    "1": "Core Concepts",
    "2": "Core Concepts",
    "3": "Core Concepts",
    "4": "Core Concepts",
    "5": "Core Concepts",
    "6": "Core Concepts",
    "7": "Core Concepts",
    "8": "Core Concepts",
    "9": "Core Concepts",
    "10": "Core Concepts",
    "11": "Core Concepts",
    "12": "Core Concepts",
    "13": "Core Concepts",
    "14": "Core Concepts",
    "15": "Core Concepts",
    "16": "Core Concepts",
    "17": "Core Concepts",
    "18": "Core Concepts",
    "19": "Core Concepts",
    "20": "Core Concepts",
    "21": "Core Concepts",
    "22": "Core Concepts",
    "23": "Core Concepts",
    "24": "Core Concepts",
    "25": "Core Concepts",
    "26": "Core Concepts",
    "27": "Core Concepts",
    "28": "Core Concepts",
    "29": "Core Concepts",
    "30": "Core Concepts",
    "31": "Core Concepts",
    "32": "Core Concepts",
    "33": "Core Concepts",
    "34": "Core Concepts",
    "35": "Core Concepts",
    "36": "Core Concepts",
    "37": "Core Concepts",
    "38": "Core Concepts",
    "39": "Core Concepts",
    "40": "Core Concepts",
    "41": "Core Concepts",
    "42": "Core Concepts",
    "43": "Core Concepts",
    "44": "Core Concepts",
    "45": "Core Concepts",
    "46": "Core Concepts",
    "47": "Core Concepts",
    "48": "Core Concepts",
    "49": "Core Concepts",
    "50": "Core Concepts",
    "51": "Core Concepts",
    "52": "Core Concepts",
    "53": "Core Concepts",
    "54": "Core Concepts",
    "55": "Core Concepts",
    "56": "Core Concepts",
    "57": "Core Concepts",
    "58": "Core Concepts",
    "59": "Core Concepts",
    "60": "Core Concepts",
    "61": "Core Concepts",
    "62": "Core Concepts",
    "63": "Core Concepts",
    "64": "Core Concepts",
    "65": "Core Concepts",
    "66": "Testing",
    "67": "Configuration",
    "68": "Configuration",
    "69": "Configuration",
    "70": "Core Concepts",
    "71": "Monitoring",
    "72": "Versioning",
    "73": "Configuration",
    "74": "Real-world Applications",
    "75": "Error Handling"
  },
  "answers": {
    "1": "Spring Boot is a framework that simplifies the process of developing Spring applications. It is different from the Spring Framework in that it provides a more opinionated approach and includes features like auto-configuration, embedded servers, and starter dependencies.",
    "2": "Main features of Spring Boot include auto-configuration, embedded web servers, starter dependencies, production-ready features (like Actuator), and simplified project setup.",
    "3": "Spring Boot uses Maven or Gradle for dependency management and provides starter dependencies that simplify the process of including required libraries.",
    "4": "The application.properties file is used to configure various properties for a Spring Boot application, such as database configurations, logging settings, and server ports.",
    "5": "Spring Boot supports microservices by providing features like embedded servers, RESTful services, and integration with service discovery and configuration management tools.",
    "6": "Spring Boot Starters are a set of convenient dependency descriptors you can include in your application. Commonly used starters include 'spring-boot-starter-web', 'spring-boot-starter-data-jpa', and 'spring-boot-starter-security'.",
    "7": "Spring Boot auto-configuration attempts to automatically configure your Spring application based on the dependencies present on the classpath.",
    "8": "You can disable auto-configuration by using the @EnableAutoConfiguration(exclude={...}) annotation or by setting spring.autoconfigure.exclude in application.properties.",
    "9": "@SpringBootApplication is a convenience annotation that combines @Configuration, @EnableAutoConfiguration, and @ComponentScan. It is used to define the main class of a Spring Boot application.",
    "10": "Spring Boot Actuator provides production-ready features such as metrics, health checks, and application monitoring endpoints, helping to manage and monitor applications.",
    "11": "Spring Boot DevTools provides developers with features like automatic restarts, live reload, and enhanced debugging capabilities to improve the development experience.",
    "12": "Spring Boot uses the ApplicationContext to manage beans, allowing for more flexible and dynamic bean lifecycle management compared to the traditional Spring Framework.",
    "13": "You can configure a custom banner in Spring Boot by placing a banner.txt or banner.png file in the resources directory or by configuring a custom Banner instance programmatically.",
    "14": "Spring Boot Profiles allow you to define different configurations for different environments (e.g., dev, test, prod) by specifying property files or using @Profile annotations.",
    "15": "You can run a Spring Boot application as a standalone JAR by packaging it with the Spring Boot Maven/Gradle plugin and executing it with 'java -jar yourapp.jar'.",
    "16": "Spring Boot CLI is a command-line tool that allows you to quickly develop and test Spring applications using Groovy scripts.",
    "17": "Embedded Servlet Containers are used in Spring Boot to provide web server capabilities without requiring an external server, simplifying deployment.",
    "18": "@Component is a generic stereotype for any Spring-managed component, @Service is specifically for service-layer components, and @Repository is used for Data Access Object (DAO) components.",
    "19": "Spring Boot supports database migrations through tools like Flyway and Liquibase, which allow you to version control your database schema.",
    "20": "The CommandLineRunner interface can be implemented to execute specific code after the Spring application has started, often used for initialization tasks.",
    "21": "You can enable and configure logging in Spring Boot using the application.properties file to set logging levels and configure log formats.",
    "22": "The default logging implementation in Spring Boot is Logback, which can be configured using the application.properties file.",
    "23": "Spring Boot simplifies REST API development by providing built-in support for creating RESTful controllers, handling request/response formats, and configuring CORS.",
    "24": "You can handle exceptions in Spring Boot by using @ControllerAdvice and @ExceptionHandler annotations to define global exception handling mechanisms.",
    "25": "Custom properties can be defined in Spring Boot by adding them to the application.properties file and using @Value or @ConfigurationProperties to inject them.",
    "26": "Spring Boot manages externalized configurations by allowing property files, YAML files, and environment variables to be used for configuration, providing flexibility.",
    "27": "A Spring Boot filter is a component that performs filtering tasks on the request and response, often used for logging or authentication purposes.",
    "28": "Spring Boot manages session handling using Spring's session management capabilities, allowing you to configure session persistence and timeout settings.",
    "29": "Caching can be implemented in Spring Boot using the @Cacheable, @CachePut, and @CacheEvict annotations, along with configuring a cache manager.",
    "30": "@Configuration is used to define Spring configuration classes, allowing you to define beans and customize the application context programmatically.",
    "31": "A BeanFactory is a more basic container than ApplicationContext and does not support advanced features like event propagation or AOP.",
    "32": "You can create a custom health check in Spring Boot by implementing the HealthIndicator interface and registering it as a bean in the application context.",
    "33": "The different phases of a Spring Boot application lifecycle include initialization, configuration, startup, running, and shutdown phases.",
    "34": "Spring Boot starters simplify dependency management by providing a set of curated dependencies that are commonly used together for specific functionalities.",
    "35": "Spring Boot handles hot-swapping of components by using the DevTools module, which enables automatic restarts when classes are modified.",
    "36": "@ConditionalOnProperty is used to conditionally enable or disable beans based on the presence or value of specific properties in application configuration.",
    "37": "Spring Boot DevTools enhances the developer experience by providing features like automatic application restarts, live reload of static resources, and custom logging configurations.",
    "38": "Spring Boot’s default configuration for web applications includes embedded servers, auto-configuration of Spring MVC, and REST support.",
    "39": "Different environments in Spring Boot can be configured using profiles (application-{profile}.properties) or by using the --spring.profiles.active argument.",
    "40": "Spring Boot handles asynchronous processing using @Async and TaskExecutor, allowing methods to run in a separate thread.",
    "41": "Custom error pages can be set up in Spring Boot by defining HTML templates or configuring error handling in the application.properties file.",
    "42": "Spring Boot applications can be deployed as standalone JARs, as WAR files on external servers, or even as Docker containers.",
    "43": "@Bean is used to define a Spring-managed bean in the application context, which can be injected into other beans using @Autowired.",
    "44": "Spring Boot handles version compatibility by using Maven or Gradle dependency management, and it includes dependency constraints to avoid conflicts.",
    "45": "The Spring Boot Maven/Gradle plugin provides support for packaging applications, running tests, and managing dependencies in Spring Boot projects.",
    "46": "Spring Boot supports reactive programming through Project Reactor, allowing for non-blocking, asynchronous application development.",
    "47": "Metrics in Spring Boot can be handled using Micrometer, which provides a facade for different monitoring systems.",
    "48": "You can configure multiple data sources in Spring Boot by defining DataSource beans and using @Primary to indicate the default.",
    "49": "Spring Boot filters allow you to intercept requests and responses, enabling functionalities like logging, authentication, and CORS handling.",
    "50": "The DispatcherServlet is a core component in Spring MVC that handles HTTP requests and routes them to the appropriate controllers.",
    "51": "Task scheduling in Spring Boot can be configured using the @Scheduled annotation or through the scheduling configuration in application.properties.",
    "52": "The default packaging structure for Spring Boot projects is a flat structure, with the main application class in the root package and other components in sub-packages.",
    "53": "CORS can be handled in Spring Boot by configuring a global CORS filter or using @CrossOrigin annotations in your controllers.",
    "54": "Spring Boot configuration properties allow you to bind externalized configurations to Java objects using @ConfigurationProperties.",
    "55": "Spring Boot simplifies working with databases by providing Spring Data JPA for repository management and easy configuration of data sources.",
    "56": "Spring Boot supports internationalization (i18n) by providing resource bundles for different languages and locales.",
    "57": "A Spring Boot servlet initializer allows you to configure the Spring application context for use in a servlet container, enabling WAR deployment.",
    "58": "You can run a Spring Boot application on an external web server by packaging it as a WAR file and deploying it to a servlet container like Tomcat.",
    "59": "Setting up a Spring Boot Admin Server involves creating a Spring Boot application with the admin server dependencies and configuring client applications to register with it.",
    "60": "Spring Boot supports cloud-native application development by providing integrations with cloud services, cloud configuration, and service discovery tools.",
    "61": "Spring Boot Actuator provides monitoring features like health checks, metrics endpoints, and application status, which are critical for managing applications in production.",
    "62": "Spring Boot integrates with cloud platforms like AWS or Azure by providing cloud-specific starters and configuration properties for easy deployment.",
    "63": "You can secure a Spring Boot application by using Spring Security, which provides authentication and authorization mechanisms.",
    "64": "HTTPS can be enabled in a Spring Boot application by configuring SSL properties in application.properties and using an embedded Tomcat server.",
    "65": "Spring Boot interceptors can be used to intercept requests before they reach the controller, allowing for logging, authentication, and modification of requests.",
    "66": "@SpringBootTest is used to create an integration test for a Spring Boot application, loading the application context and enabling dependency injection.",
    "67": "A Spring Boot application can be configured to run with multiple profiles by specifying profiles in application.properties or using command line arguments.",
    "68": "WebApplicationType in Spring Boot indicates the type of web application (servlet, reactive, or none) and influences the auto-configuration process.",
    "69": "Spring Boot manages classpath scanning using component scanning to discover beans and configurations automatically based on package structure.",
    "70": "Spring Boot simplifies dependency injection by using annotations like @Autowired, @Service, and @Repository to manage bean creation and wiring.",
    "71": "Monitoring a Spring Boot application in production can be achieved using Actuator endpoints, Micrometer, and third-party monitoring tools.",
    "72": "The differences between Spring Boot 1.x and 2.x include new features like improved dependency management, reactive support, and enhanced configuration options.",
    "73": "Spring Boot can be configured for non-web applications by excluding web starters and using appropriate dependencies for the desired functionality.",
    "74": "Common use cases of Spring Boot in real-world applications include building RESTful APIs, microservices, and cloud-native applications.",
    "75": "In Spring Boot, exceptions and global error handling can be managed using @ControllerAdvice and custom error handling logic."
  }
}
